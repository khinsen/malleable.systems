actors:
  basman:
    name: Antranig Basman
    affiliation: Raising the Floor - International
    avatar: /avatars/basman.jpg
    website: http://ponder.org.uk/
    twitter: amb26ponder
  eagan:
    name: James R. Eagan
    affiliation: Télécom Paris
    avatar: /avatars/eagan.jpg
    website: https://james.eagan.fr/
    twitter: dr_eagan
  kell:
    name: Stephen Kell
    affiliation: University of Kent
    avatar: /avatars/stephenrkell.jpg
    website: https://www.cs.kent.ac.uk/people/staff/srk21/
    twitter: stephenrkell
  klokmose:
    name: Clemens N. Klokmose
    affiliation: Aarhus University
    avatar: /avatars/klokmose.jpg
    website: http://www.klokmose.net/clemens/
    twitter: cklokmose
  hsu:
    name: Weiwei Hsu
    affiliation: California College of the Arts
    avatar: /avatars/glitchyowl.jpg
    website: https://weiweihsu.com/
    twitter: glitchyowl
  inkandswitch:
    name: Ink & Switch
    avatar: /avatars/inkandswitch.png
    website: https://www.inkandswitch.com/
    twitter: inkandswitch
  litt:
    name: Geoffrey Litt
    affiliation: MIT
    avatar: /avatars/litt.jpg
    website: https://www.geoffreylitt.com/
    twitter: geoffreylitt
  schmitz:
    name: Yoshiki Schmitz
    avatar: /avatars/yoshiki.jpg
    website: https://yschmitz.com/
    twitter: yoshikischmitz
  stinnett:
    name: J. Ryan Stinnett
    role: Collective organiser
    avatar: /avatars/jryans.jpg
    website: https://convolv.es
    twitter: jryans
  tchernavskij:
    name: Philip Tchernavskij
    affiliation: OCAD University
    avatar: /avatars/ptcher.jpg
    website: https://tcher.tech/
    twitter: ptchernavskij

works:
  malleable:
    kind: thesis
    authors:
      - tchernavskij
    title:
      "Designing and Programming Malleable Software"
    year: 2019
    description:
      "In publication."
    quotes:
      - "The contemporary landscape of interactive software operates as a
        “designer-knows-best” model that gives users very few opportunities to
        change their software or to make different pieces of software work
        together as they see fit."
      - "I introduce malleable software as a design vision that reconstructs the
        goals of tailorable systems with pluralism as a guiding value. Malleable
        software is made up of interface elements untangled from the closed
        worlds of apps, which can be developed by different authors and
        (re-)combined by end users."
  browserextensions:
    kind: post
    authors:
      - litt
    title:
      "Browser extensions are underrated: the promise of hackable software"
    year: 2019
    location: https://www.geoffreylitt.com/2019/07/29/browser-extensions.html
    quotes:
      - "Among major software platforms today, browser extensions are the rare
        exception that allow and encourage users to modify the apps that we use,
        in creative ways not intended by their original developers. On
        smartphone and desktop platforms, this sort of behavior ranges from
        unusual to impossible, but in the browser it’s an everyday activity."
      - "Since the beginning of personal computing, there’s been a philosophical
        tradition that encourages using computers as an interactive medium where
        people contribute their own ideas and build their own tools—authorship
        over consumption."
  enduser:
    kind: paper
    authors:
      - inkandswitch
    title:
      "End-user programming"
    year: 2019
    location: https://www.inkandswitch.com/end-user-programming.html
    quotes:
      - "Desktop programs, web apps, and smartphone apps are to various degrees
        like appliances with a hermetic seal to keep users out of their
        interior. If there is not already a button for a given function, the
        only option for users is to petition the developer."
      - "There shouldn’t be a chasm that the user has to cross in order to
        customize the behavior of their software. Going from using to inspecting
        to modifying the system should be a gradual process where each of
        the steps is small enough to be easily discoverable. The user should not
        need to switch to “programmer mindset” but instead stay within the
        context of the application. They can stay close to their work and their
        ideas."
  liballocs:
    kind: library
    authors:
      - name: kell
        type: owner
      - name: stinnett
        type: contributor
    title:
      liballocs
    year: 2011 — present
    location: https://github.com/stephenrkell/liballocs
    description:
      "Meta-level run-time services for Unix processes... a.k.a. dragging Unix
      into the 1980s"
    quotes:
      - "Unix abstractions are fairly simple and fairly general, but they are
        not humane, and they invite fragmentation. By 'not humane', I mean that
        they are error-prone and difficult to experiment with interactively. By
        'fragmentation', I mean they invite building higher-level abstractions
        in mutually opaque and incompatible ways (think language VMs, file
        formats, middlewares...). To avoid these, liballocs is a minimal
        extension of Unix-like abstractions broadly in the spirit of
        Smalltalk-style dynamism, designed to counter both of these problems."
  mythical:
    kind: paper
    authors:
      - kell
    title:
      "The mythical matched modules: overcoming the tyranny of inflexible
      software construction"
    year: 2009
    location: https://www.cs.kent.ac.uk/people/staff/srk21/research/papers/kell09mythical.pdf
    quotes:
      - "Conventional tools yield expensive and inflexible software. ... I
        propose that a solution must radically separate the concern of
        integration in software: firstly by using novel tools specialised
        towards integration (the “**integration domain**”), and secondly by
        prohibiting use of preexisting interfaces (“interface hiding”) outside
        that domain."
      - "Placing high-level tool support for integration and adaptation close to
        the user, for example within web application mashup platforms and
        browser extensions has already led to added-value innovations which
        could not have been anticipated by the creators of the underlying
        software."
  place:
    kind: tweet
    authors:
      - schmitz
    title:
      Software as a “place”
    year: 2019
    location: https://twitter.com/yoshikischmitz/status/1208625526966902784
    quotes:
      - "What makes a piece of software a “place” vs a “tool” or an “appliance”?
        ... I think some notion of **limitlessness and nesting** are necessary.
        [The feeling of a “place”] seems to come from some kind of
        limitlessness: Notion has infinite hierarchies, Figma has an infinite
        canvas. ... This definition matters to me because appliances are static,
        but places can be occupied and changed. You can have memories and
        experiences in them. Things can grow in them. New stuff can emerge.
        Communities can form. I want more software to be like that."
  revolution:
    kind: paper
    authors:
      - basman
      - tchernavskij
    title:
      "What Lies in the Path of the Revolution"
    year: 2018
    location: https://tcher.tech/publications/PPIG2018_WhatLiesInThePathOfTheRevolution.pdf
    quotes:
      - "We argue that a form of “**digital serfdom**” has rapidly grown up around
        us, where various important classes of artefacts, increasingly essential
        for everyday life, including participation in political and economic
        life, cannot be effectively owned by ordinary individuals."
      - "Many of the technological barriers to ownership, especially as regards
        software, can be seen as embedded in certain questions of “reuse” — one
        of the central affordances of ownership is the ability to transplant a
        thing from its original location to a different one, following the
        desires or person of the owner. For most kinds of software this is
        possible in only a crude way — an “application” can be installed on one
        machine rather than another — and with the rising prevalence of rental
        or cloud-based models for the deployment of software, it is decreasingly
        possible at all."
      - "If you find a piece of software that does something of value to you,
        **it should be possible to make it your own**. This implies that you can
        keep using it as part of the collection of tools you carry with you, in
        familiar contexts, or experiment with using it in novel contexts."
  space:
    kind: thesis
    authors:
      - hsu
    title:
      "The “Space” of Computing"
    year: 2018
    location: https://www.youtube.com/watch?v=nVFS85Zx6uw
    description:
      "Our conception of “computing” has changed and continues to change. This
      work identifies dimensions that constitute the “space of computing”."
    image: /works/space.png
    quotes:
      - "Currently, only those who have a programming background or resources
        have the ability to create digital artifacts. This forces the rest of
        the world to be consumers, rather than creators or authors. When
        creating digital products, our conception of target audience is “users.”
        The notion of “users” sometimes assumes that their main goal is
        consuming instead of playing, creating, or conversing. What if the
        digital environment was inclusive enough for anyone to create? How can
        we provide the tools that will enable everyone to become authors?"
  webstrates:
    kind: paper
    authors:
      - klokmose
      - eagan
      - Siemen Baader
      - Wendy Mackay
      - Michel Beaudouin-Lafon
    title:
      "Webstrates: Shareable Dynamic Media"
    year: 2015
    location: http://www.klokmose.net/clemens/wp-content/uploads/2015/08/webstrates.pdf
    image: /works/webstrates.png
    quotes:
      - "Webstrates offer a novel approach for creating shareable dynamic media
        that blur the distinction between documents and applications. Our vision
        requires software to be malleable by users, so they can appropriate
        documents and tools to meet individual needs; shareable among users, so
        they can collaborate on multiple aspects of the media; and distributable
        across heterogeneous devices and platforms."
      - "By sharing embedded code, behavior typically associated with
        application software can also be (collaboratively) manipulated, opening
        the way to novel possibilities for combining content, computation and
        interaction. Webstrates can be composed by embedding one webstrate
        within another, a process called transclusion [Nelson 1995], that lets
        users truly share, rather than copy, content."
  wildcard:
    kind: paper
    authors:
      - litt
      - Daniel Jackson
    title:
      "Wildcard: Spreadsheet-Driven Customization of Web Applications"
    year: 2020
    location: https://www.geoffreylitt.com/wildcard/salon2020/
    image: /works/wildcard.png
    quotes:
      - "In this paper, we present spreadsheet-driven customization, a technique
        that enables end users to customize software without doing any
        traditional programming. The idea is to augment an application’s UI with
        a spreadsheet that is synchronized with the application’s data. When the
        user manipulates the spreadsheet, the underlying data is modified and
        the changes are propagated to the UI, and vice versa."
      - "Generic tools are especially important for software customization,
        because a common barrier to customizing software is not having enough
        time [Mackay 1991]—it’s more likely that people will customize software
        frequently if they can reuse the same tools across many applications."
      - "One of the most interesting properties of spreadsheets is that users
        familiar with only a tiny sliver of their functionality (e.g., storing
        tables of numbers and computing simple sums) can still use them in
        valuable ways. This supports the user’s natural motivation to continue
        using the tool, and to eventually learn its more powerful features if
        needed [Nardi and Miller 1991]."
  hypercard:
    kind: tool
    authors:
      - Bill Atkinson
      - Dan Winkler
      - HyperCard team at Apple
    title:
      "HyperCard"
    year: 1987
    location: https://en.wikipedia.org/wiki/HyperCard
    image: /works/hypercard.png
    quotes:
      - "HyperCard is a software erector set that lets non-programmers put
        together interactive information — _Bill Atkinson, [Computer
        Chronicles](https://archive.org/details/CC501_hypercard) (1987)_"
      - "HyperCard's biggest win was a very low entry threshold for those who
        wanted to build their own 'stacks' - combinations of user interface,
        code, and persistent data. There were plenty of examples to suggest
        ideas, and all the code was open for tweaking. — _Tim Oren, [A Eulogy
        for HyperCard](https://due-diligence.typepad.com/blog/2004/03/a_eulogy_for_hy.html)
        (2004)_"
  emacs:
    kind: tool
    authors:
      - Richard Stallman
      - many contributors
    year: 1976-2020
    location: https://www.gnu.org/software/emacs/
    title:
      "GNU Emacs"
    image: /works/emacs.png
    quotes:
      - "Extensible means that you can go beyond simple customization
         and create entirely new commands. New commands are simply
         programs written in the Lisp language, which are run by
         Emacs's own Lisp interpreter. Existing commands can even be
         redefined in the middle of an editing session, without having
         to restart Emacs. Most of the editing commands in Emacs are
         written in Lisp; the few exceptions could have been written
         in Lisp but use C instead for efficiency. - [GNU Emacs manual,
         Introduction](https://www.gnu.org/software/emacs/manual/html_node/emacs/Intro.html#Intro)_"
      - "Org can be used as a TODO lists manager and as a planner.
         Org is a great plain-text table editor.
         Org is an authoring and publication tool.
         Org makes literate programming a handy and natural way to deal with code.
         [Org mode feature list](https://orgmode.org/features.html)_"
      - "This appendix covers some areas where users can extend the functionality of Org.
         [Org mode manual, Appendix A Hacking](https://www.gnu.org/software/emacs/manual/html_mono/org.html#Hacking)_"
